import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import { RepositoriesCursorIDPage, type RepositoriesCursorIDPageParams } from "../pagination.js";
export declare class Repositories extends APIResource {
    /**
     * Create a connection to a Github Repository and trigger an initial inspection of
     * the repo's technical stack and developer environment requirements.
     */
    create(body: RepositoryCreateParams, options?: Core.RequestOptions): Core.APIPromise<RepositoryConnectionView>;
    /**
     * Get Repository Connection details including latest inspection status and
     * generated respository insights.
     */
    retrieve(id: string, options?: Core.RequestOptions): Core.APIPromise<RepositoryConnectionView>;
    /**
     * List all available repository connections.
     */
    list(query?: RepositoryListParams, options?: Core.RequestOptions): Core.PagePromise<RepositoryConnectionViewsRepositoriesCursorIDPage, RepositoryConnectionView>;
    list(options?: Core.RequestOptions): Core.PagePromise<RepositoryConnectionViewsRepositoriesCursorIDPage, RepositoryConnectionView>;
    /**
     * Permanently Delete a Repository Connection including any automatically generated
     * inspection insights.
     */
    delete(id: string, body?: RepositoryDeleteParams | null | undefined, options?: Core.RequestOptions): Core.APIPromise<unknown>;
    /**
     * List all analyzed versions of a repository connection including automatically
     * generated insights for each version.
     */
    versions(id: string, options?: Core.RequestOptions): Core.APIPromise<RepositoryVersionListView>;
}
export declare class RepositoryConnectionViewsRepositoriesCursorIDPage extends RepositoriesCursorIDPage<RepositoryConnectionView> {
}
export interface RepositoryConnectionListView {
    has_more: boolean;
    /**
     * List of repositories matching filter.
     */
    repositories: Array<RepositoryConnectionView>;
    total_count: number;
}
/**
 * The ID of the Repository.
 */
export interface RepositoryConnectionView {
    /**
     * The ID of the Repository.
     */
    id: string;
    /**
     * The name of the Repository.
     */
    name: string;
    /**
     * The account owner of the Repository.
     */
    owner: string;
    /**
     * The current status of the Repository.
     */
    status: 'pending' | 'failure' | 'active';
    /**
     * Reason for failure, if the status is 'failure'.
     */
    failure_reason?: string | null;
}
export interface RepositoryVersionDetails {
    /**
     * Analyzed time of the Repository Version (Unix timestamp milliseconds).
     */
    analyzed_at: number;
    /**
     * The sha of the analyzed version of the Repository.
     */
    commit_sha: string;
    /**
     * Tools discovered during inspection.
     */
    extracted_tools: RepositoryVersionDetails.ExtractedTools;
    /**
     * Commands required to set up repository environment.
     */
    repository_setup_details: RepositoryVersionDetails.RepositorySetupDetails;
    /**
     * The account owner of the Repository.
     */
    status: 'inspecting' | 'inspection_failed' | 'success';
}
export declare namespace RepositoryVersionDetails {
    /**
     * Tools discovered during inspection.
     */
    interface ExtractedTools {
        /**
         * The set of available commands on this repository such as building etc.
         */
        commands: Record<string, string>;
        /**
         * What package manager this repository uses.
         */
        package_manager: string;
    }
    /**
     * Commands required to set up repository environment.
     */
    interface RepositorySetupDetails {
        /**
         * The blueprint built that supports setting up this repository.
         */
        blueprint_id: string;
        /**
         * Command to initialize the env we need to run the commands for this repository.
         */
        env_initialization_command: string;
        /**
         * Setup commands necessary to support repository i.e. apt install XXX.
         */
        workspace_setup: Array<string>;
    }
}
export interface RepositoryVersionListView {
    /**
     * List of analyzed versions of this repository.
     */
    analyzed_versions: Array<RepositoryVersionDetails>;
}
export type RepositoryDeleteResponse = unknown;
export interface RepositoryCreateParams {
    /**
     * Name of the repository.
     */
    name: string;
    /**
     * Account owner of the repository.
     */
    owner: string;
}
export interface RepositoryListParams extends RepositoriesCursorIDPageParams {
}
export interface RepositoryDeleteParams {
}
export declare namespace Repositories {
    export { type RepositoryConnectionListView as RepositoryConnectionListView, type RepositoryConnectionView as RepositoryConnectionView, type RepositoryVersionDetails as RepositoryVersionDetails, type RepositoryVersionListView as RepositoryVersionListView, type RepositoryDeleteResponse as RepositoryDeleteResponse, RepositoryConnectionViewsRepositoriesCursorIDPage as RepositoryConnectionViewsRepositoriesCursorIDPage, type RepositoryCreateParams as RepositoryCreateParams, type RepositoryListParams as RepositoryListParams, type RepositoryDeleteParams as RepositoryDeleteParams, };
}
//# sourceMappingURL=repositories.d.ts.map