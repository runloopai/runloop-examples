import { JSONSchemaType } from 'ajv';
import { z } from 'zod';
import { JSONValue } from '../../global/dist/index.cjs';
import { BaseTool, ToolMetadata } from '../../llms/dist/index.cjs';

declare class FunctionTool<T, R extends JSONValue | Promise<JSONValue>> implements BaseTool<T> {
    #private;
    constructor(fn: (input: T) => R, metadata: ToolMetadata<JSONSchemaType<T>>, zodType?: z.ZodType<T>);
    static from<T>(fn: (input: T) => JSONValue | Promise<JSONValue>, schema: ToolMetadata<JSONSchemaType<T>>): FunctionTool<T, JSONValue | Promise<JSONValue>>;
    static from<R extends z.ZodType>(fn: (input: z.infer<R>) => JSONValue | Promise<JSONValue>, schema: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
    }): FunctionTool<z.infer<R>, JSONValue | Promise<JSONValue>>;
    static from<T, R extends z.ZodType<T>>(fn: (input: T) => JSONValue | Promise<JSONValue>, schema: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
    }): FunctionTool<T, JSONValue>;
    get metadata(): BaseTool<T>["metadata"];
    call: (input: T) => R;
}

export { FunctionTool };
