import { z } from 'zod';
import { zodToJsonSchema } from 'zod-to-json-schema';

class FunctionTool {
    #fn;
    #metadata;
    #zodType;
    constructor(fn, metadata, zodType){
        this.#zodType = null;
        this.call = (input)=>{
            if (this.#zodType) {
                const result = this.#zodType.safeParse(input);
                if (result.success) {
                    return this.#fn.call(null, result.data);
                } else {
                    console.warn(result.error.errors);
                }
            }
            return this.#fn.call(null, input);
        };
        this.#fn = fn;
        this.#metadata = metadata;
        if (zodType) {
            this.#zodType = zodType;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static from(fn, schema) {
        if (schema.parameters instanceof z.ZodSchema) {
            const jsonSchema = zodToJsonSchema(schema.parameters);
            return new FunctionTool(fn, {
                ...schema,
                parameters: jsonSchema
            }, schema.parameters);
        }
        return new FunctionTool(fn, schema);
    }
    get metadata() {
        return this.#metadata;
    }
}

export { FunctionTool };
