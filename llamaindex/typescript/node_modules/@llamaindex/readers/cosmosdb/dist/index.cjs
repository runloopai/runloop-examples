Object.defineProperty(exports, '__esModule', { value: true });

var schema = require('@llamaindex/core/schema');

/**
 * Read data from CosmosDB.
 */ class SimpleCosmosDBReader {
    constructor(client){
        this.client = client;
    }
    /**
   * Loads data from a Cosmos DB container
   * @returns {Promise<Document[]>}
   */ async loadData(config) {
        if (!config.databaseName || !config.containerName) {
            throw new Error("databaseName and containerName are required");
        }
        const database = this.client.database(config.databaseName);
        const container = database.container(config.containerName);
        const query = config.query || "SELECT * FROM c";
        const fields = config.fields || [
            "text"
        ];
        const fieldSeparator = config.fieldSeparator || "";
        const metadataFields = config.metadataFields;
        try {
            let res = await container.items.query(query).fetchAll();
            const documents = [];
            for (const item of res.resources){
                const texts = fields.map((name)=>item[name]);
                const flattenedTexts = texts.flat();
                const text = flattenedTexts.join(fieldSeparator);
                let metadata = {};
                if (metadataFields) {
                    metadata = Object.fromEntries(metadataFields.map((name)=>[
                            name,
                            item[name]
                        ]));
                }
                documents.push(new schema.Document({
                    id_: item.id,
                    text,
                    metadata
                }));
            }
            return documents;
        } catch (error) {
            throw new Error(`Error loading data from Cosmos DB: ${error}`);
        }
    }
}

exports.SimpleCosmosDBReader = SimpleCosmosDBReader;
