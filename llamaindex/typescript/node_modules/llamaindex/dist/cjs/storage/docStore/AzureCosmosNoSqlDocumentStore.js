"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AzureCosmosNoSqlDocumentStore", {
    enumerable: true,
    get: function() {
        return AzureCosmosNoSqlDocumentStore;
    }
});
const _AzureCosmosNoSqlKVStore = require("../kvStore/AzureCosmosNoSqlKVStore.js");
const _KVDocumentStore = require("./KVDocumentStore.js");
const DEFAULT_DATABASE = "DocumentStoreDB";
const DEFAULT_CONTAINER = "DocumentStoreContainer";
class AzureCosmosNoSqlDocumentStore extends _KVDocumentStore.KVDocumentStore {
    constructor({ azureCosmosNoSqlKVStore, namespace }){
        super(azureCosmosNoSqlKVStore, namespace);
    }
    /**
   * Static method for creating an instance using a connection string.
   * If no connection string is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_CONNECTION_STRING` as connection string.
   * @returns Instance of AzureCosmosNoSqlDocumentStore
   */ static fromConnectionString(options = {}) {
        options.dbName = options.dbName || DEFAULT_DATABASE;
        options.containerName = options.containerName || DEFAULT_CONTAINER;
        const azureCosmosNoSqlKVStore = _AzureCosmosNoSqlKVStore.AzureCosmosNoSqlKVStore.fromConnectionString(options);
        const namespace = `${options.dbName}.${options.containerName}`;
        return new AzureCosmosNoSqlDocumentStore({
            azureCosmosNoSqlKVStore,
            namespace
        });
    }
    /**
   * Static method for creating an instance using a account endpoint and key.
   * If no endpoint and key  is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as enpoint and `AZURE_COSMOSDB_NOSQL_ACCOUNT_KEY` as key.
   * @returns Instance of AzureCosmosNoSqlDocumentStore
   */ static fromAccountAndKey(options = {}) {
        options.dbName = options.dbName || DEFAULT_DATABASE;
        options.containerName = options.containerName || DEFAULT_CONTAINER;
        const azureCosmosNoSqlKVStore = _AzureCosmosNoSqlKVStore.AzureCosmosNoSqlKVStore.fromAccountAndKey(options);
        const namespace = `${options.dbName}.${options.containerName}`;
        return new AzureCosmosNoSqlDocumentStore({
            azureCosmosNoSqlKVStore,
            namespace
        });
    }
    /**
   * Static method for creating an instance using AAD token.
   * If no endpoint and credentials are provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as endpoint and use DefaultAzureCredential() as credentials.
   * @returns Instance of AzureCosmosNoSqlDocumentStore
   */ static fromAadToken(options = {}) {
        options.dbName = options.dbName || DEFAULT_DATABASE;
        options.containerName = options.containerName || DEFAULT_CONTAINER;
        const azureCosmosNoSqlKVStore = _AzureCosmosNoSqlKVStore.AzureCosmosNoSqlKVStore.fromAadToken(options);
        const namespace = `${options.dbName}.${options.containerName}`;
        return new AzureCosmosNoSqlDocumentStore({
            azureCosmosNoSqlKVStore,
            namespace
        });
    }
}
