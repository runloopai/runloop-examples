/* eslint-disable @typescript-eslint/no-explicit-any */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AzureCosmosVCoreKVStore", {
    enumerable: true,
    get: function() {
        return AzureCosmosVCoreKVStore;
    }
});
const _kvstore = require("@llamaindex/core/storage/kv-store");
const DEFAULT_CHAT_DATABASE = "KVStoreDB";
const DEFAULT_CHAT_Collection = "KVStoreCollection";
class AzureCosmosVCoreKVStore extends _kvstore.BaseKVStore {
    mongoClient;
    dbName;
    collectionName;
    collection;
    /**
   * Create a new AzureCosmosDBNoSQLVectorStore instance.
   */ constructor({ mongoClient, dbName = DEFAULT_CHAT_DATABASE, collectionName = DEFAULT_CHAT_Collection }){
        super();
        if (!mongoClient) {
            throw new Error("MongoClient is required for AzureCosmosDBNoSQLVectorStore initialization");
        }
        this.mongoClient = mongoClient;
        this.dbName = dbName;
        this.collectionName = collectionName;
    }
    client() {
        return this.mongoClient;
    }
    async ensureCollection() {
        if (!this.collection) {
            this.collection = this.mongoClient.db(this.dbName).collection(this.collectionName);
        }
        return this.collection;
    }
    async put(key, val) {
        const collection = await this.ensureCollection();
        const insertResult = await collection.insertOne({
            id: key,
            messages: val
        });
    }
    async get(key) {
        const collection = await this.ensureCollection();
        const result = await collection.findOne({
            id: key
        });
        return result || null;
    }
    async getAll() {
        const collection = await this.ensureCollection();
        const cursor = collection.find();
        const output = {};
        await cursor.forEach((item)=>{
            output[item.id] = item.messages;
        });
        return output;
    }
    async delete(key) {
        const collection = await this.ensureCollection();
        await collection.deleteOne({
            id: key
        });
        return true;
    }
}
