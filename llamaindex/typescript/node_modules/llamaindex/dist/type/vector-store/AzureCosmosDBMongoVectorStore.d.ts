import type { BaseNode } from "@llamaindex/core/schema";
import { Collection, MongoClient } from "mongodb";
import { BaseVectorStore, type VectorStoreBaseParams, type VectorStoreQuery, type VectorStoreQueryResult } from "./types.js";
/** Azure Cosmos DB for MongoDB vCore Similarity type. */
export declare const AzureCosmosDBMongoDBSimilarityType: {
    /** Cosine similarity */
    readonly COS: "COS";
    /** Inner - product */
    readonly IP: "IP";
    /** Euclidian distance */
    readonly L2: "L2";
};
/** Azure Cosmos DB for MongoDB vCore Similarity type. */
export type AzureCosmosDBMongoDBSimilarityType = (typeof AzureCosmosDBMongoDBSimilarityType)[keyof typeof AzureCosmosDBMongoDBSimilarityType];
/** Azure Cosmos DB for MongoDB vCore Index Options. */
export type AzureCosmosDBMongoDBIndexOptions = {
    readonly indexType?: "ivf" | "hnsw" | "diskann" | undefined;
    /** Number of clusters that the inverted file (IVF) index uses to group the vector data. */
    readonly numLists?: number | undefined;
    /** Number of dimensions for vector similarity. */
    readonly dimensions?: number | undefined;
    /** Similarity metric to use with the IVF index. */
    readonly similarity?: AzureCosmosDBMongoDBSimilarityType | undefined;
    /** The max number of connections per layer with the HNSW index. */
    readonly m?: number | undefined;
    /** The size of the dynamic candidate list for constructing the graph with the HNSW index. */
    readonly efConstruction?: number | undefined;
    /** Max number of neighbors withe the Diskann idnex */
    readonly maxDegree?: number | undefined;
    /** L value for index building withe the Diskann idnex */
    readonly lBuild?: number | undefined;
    /** L value for index searching withe the Diskann idnex */
    readonly lSearch?: number | undefined;
};
/**
 * Azure Cosmos DB for MongoDB vCore vector store.
 * To use this, you should have both:
 * - the `mongodb` NPM package installed
 * - a connection string associated with a MongoDB VCore Cluster
 *
 * You do not need to create a database or collection, it will be created
 * automatically.
 *
 * You also need an index on the collection, which is by default be created
 * automatically using the `createIndex` method.
 */
export declare class AzureCosmosDBMongoDBVectorStore extends BaseVectorStore {
    storesText: boolean;
    flatMetadata: boolean;
    dbName: string;
    collectionName: string;
    indexedMetadataFields: string[];
    /**
     * The used MongoClient. If not given, a new MongoClient is created based on the MONGODB_URI env variable.
     */
    mongodbClient: MongoClient;
    indexName: string;
    embeddingKey: string;
    idKey: string;
    textKey: string;
    metadataKey: string;
    indexOptions: AzureCosmosDBMongoDBIndexOptions;
    private collection?;
    private database;
    constructor(init: Partial<AzureCosmosDBMongoDBVectorStore> & {
        dbName: string;
        collectionName: string;
        indexedMetadataFields?: string[];
    } & VectorStoreBaseParams);
    client(): MongoClient;
    ensureCollection(): Promise<Collection>;
    add(nodes: BaseNode[]): Promise<string[]>;
    /**
     * Removes specified documents from the AzureCosmosDBMongoDBVectorStore.
     * @param params Parameters for the delete operation.
     * @returns A promise that resolves when the documents have been removed.
     */
    delete(id: string, deleteOptions?: object): Promise<void>;
    query(query: VectorStoreQuery, options?: object): Promise<VectorStoreQueryResult>;
    /**
     * Creates an index on the collection with the specified index name during
     * instance construction.
     *
     * Setting the numLists parameter correctly is important for achieving good
     * accuracy and performance.
     * Since the vector store uses IVF as the indexing strategy, you should
     * create the index only after you have loaded a large enough sample
     * documents to ensure that the centroids for the respective buckets are
     * faily distributed.
     *
     * @param indexType Index Type for Mongo vCore index.
     * @param dimensions Number of dimensions for vector similarity.
     *    The maximum number of supported dimensions is 2000.
     *    If no number is provided, it will be determined automatically by
     *    embedding a short text.
     * @param similarity Similarity metric to use with the IVF index.
     *    Possible options are:
     *    - CosmosDBSimilarityType.COS (cosine distance)
     *    - CosmosDBSimilarityType.L2 (Euclidean distance)
     *    - CosmosDBSimilarityType.IP (inner product)
     * @returns A promise that resolves when the index has been created.
     */
    createIndex(dimensions?: number | undefined, indexType?: "ivf" | "hnsw" | "diskann", similarity?: AzureCosmosDBMongoDBSimilarityType): Promise<void>;
    /**
     * Checks if the specified index name during instance construction exists
     * on the collection.
     * @returns A promise that resolves to a boolean indicating if the index exists.
     */
    checkIndexExists(): Promise<boolean>;
    /**
     * Deletes the index specified during instance construction if it exists.
     * @returns A promise that resolves when the index has been deleted.
     */
    deleteIndex(indexName: string): Promise<void>;
}
