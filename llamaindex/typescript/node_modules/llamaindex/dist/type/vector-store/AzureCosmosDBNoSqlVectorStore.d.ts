import { CosmosClient, type ContainerRequest, type DatabaseRequest, type IndexingPolicy, type VectorEmbeddingPolicy } from "@azure/cosmos";
import { type TokenCredential } from "@azure/identity";
import { BaseNode } from "@llamaindex/core/schema";
import { BaseVectorStore, type VectorStoreBaseParams, type VectorStoreQuery, type VectorStoreQueryResult } from "./types.js";
/** Azure Cosmos DB for NoSQL database creation options. */
export type AzureCosmosDBNoSqlCreateDatabaseOptions = Partial<Omit<DatabaseRequest, "id">>;
/** Azure Cosmos DB for NoSQL container creation options. */
export type AzureCosmosDBNoSqlCreateContainerOptions = Partial<Omit<ContainerRequest, "id" | "vectorEmbeddingPolicy" | "indexingPolicy">>;
export interface AzureCosmosDBNoSQLInitOptions {
    readonly vectorEmbeddingPolicy?: VectorEmbeddingPolicy | undefined;
    readonly indexingPolicy?: IndexingPolicy | undefined;
    readonly createContainerOptions?: AzureCosmosDBNoSqlCreateContainerOptions | undefined;
    readonly createDatabaseOptions?: AzureCosmosDBNoSqlCreateDatabaseOptions | undefined;
}
/**
 * Configuration options for the `AzureCosmosDBNoSQLVectorStore` constructor.
 */
export interface AzureCosmosDBNoSQLConfig extends AzureCosmosDBNoSQLInitOptions {
    client?: CosmosClient;
    readonly databaseName?: string;
    readonly containerName?: string;
    readonly textKey?: string;
    readonly metadataKey?: string;
    readonly flatMetadata?: boolean;
    readonly idKey?: string;
}
/**
 * Query options for the `AzureCosmosDBNoSQLVectorStore.query` method.
 * @property includeEmbeddings - Whether to include the embeddings in the result. Default false
 * @property includeVectorDistance - Whether to include the vector distance in the result. Default true
 * @property whereClause - The where clause to use in the query. While writing this clause, use `c` as the alias for the container and do not include the `WHERE` keyword.
 */
export interface AzureCosmosQueryOptions {
    includeVectorDistance?: boolean;
    whereClause?: string;
}
export declare class AzureCosmosDBNoSqlVectorStore extends BaseVectorStore {
    storesText: boolean;
    private initPromise?;
    private container;
    /**
     * The CosmosDB client. This is either passed in or created.
     */
    cosmosClient: CosmosClient;
    /**
     * The key to use for the text field in the CosmosDB container.
     * Default: "text"
     */
    textKey: string;
    flatMetadata: boolean;
    /**
     * The key to use for the id field in the CosmosDB container.
     * Default: "id"
     */
    idKey: string;
    /**
     * The key to use for the metadata field in the CosmosDB container.
     * Default: "metadata"
     */
    metadataKey: string;
    /**
     * The key to use for the vector embedding field in the CosmosDB container.
     * Default: "embedding"
     */
    embeddingKey: string;
    private initialize;
    client(): unknown;
    constructor(dbConfig: AzureCosmosDBNoSQLConfig & VectorStoreBaseParams);
    /**
     * Static method for creating an instance using a connection string.
     * If no connection string is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_CONNECTION_STRING` as connection string.
     * @returns Instance of AzureCosmosDBNoSqlVectorStore
     */
    static fromConnectionString(config?: {
        connectionString?: string;
    } & AzureCosmosDBNoSQLConfig & VectorStoreBaseParams): AzureCosmosDBNoSqlVectorStore;
    /**
     * Static method for creating an instance using a account endpoint and key.
     * If no endpoint and key  is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as enpoint and `AZURE_COSMOSDB_NOSQL_ACCOUNT_KEY` as key.
     * @returns Instance of AzureCosmosDBNoSqlVectorStore
     */
    static fromAccountAndKey(config?: {
        endpoint?: string;
        key?: string;
    } & AzureCosmosDBNoSQLConfig & VectorStoreBaseParams): AzureCosmosDBNoSqlVectorStore;
    /**
     * Static method for creating an instance using account endpoint and managed identity.
     * If no endpoint and credentials are provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as endpoint and use DefaultAzureCredential() as credentials.
     * @returns Instance of AzureCosmosDBNoSqlVectorStore
     */
    static fromUriAndManagedIdentity(config?: {
        endpoint?: string;
        credential?: TokenCredential;
    } & AzureCosmosDBNoSQLConfig & VectorStoreBaseParams): AzureCosmosDBNoSqlVectorStore;
    /**
     * Adds document to the CosmosDB container.
     *
     * @returns an array of document ids which were added
     */
    add(nodes: BaseNode[]): Promise<string[]>;
    /**
     * Delete a document from the CosmosDB container.
     *
     * @param refDocId - The id of the document to delete
     * @param deleteOptions - Any options to pass to the container.item.delete function
     * @returns Promise that resolves if the delete query did not throw an error.
     */
    delete(refDocId: string, deleteOptions?: object): Promise<void>;
    /**
     * Performs a vector similarity search query in the CosmosDB container.
     *
     * @param query VectorStoreQuery
     * @returns List of nodes along with similarityScore
     */
    query(query: VectorStoreQuery, options?: AzureCosmosQueryOptions): Promise<VectorStoreQueryResult>;
    /**
     * Initialize the CosmosDB container.
     */
    private init;
}
