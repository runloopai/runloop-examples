import { SearchClient, type VectorizedQuery } from "@azure/search-documents";
import { type VectorStoreQuery, type VectorStoreQueryResult } from "llamaindex";
import { type R } from "./AzureAISearchVectorStoreConfig.js";
export declare class AzureQueryResultSearchBase<T extends R> {
    protected _query: VectorStoreQuery;
    fieldMapping: Record<string, string>;
    odataFilter: string | undefined;
    searchClient: SearchClient<T> | undefined;
    constructor(query: VectorStoreQuery, fieldMapping: Record<string, string>, odataFilter: string | undefined, searchClient: SearchClient<T> | undefined);
    get selectFields(): string[];
    createSearchQuery(): string;
    protected createQueryVector(): VectorizedQuery<T>[] | null;
    protected _createQueryResult(searchQuery: string, vectorQueries: VectorizedQuery<T>[] | null): Promise<VectorStoreQueryResult>;
    search(): Promise<VectorStoreQueryResult>;
}
export declare class AzureQueryResultSearchDefault<T extends R> extends AzureQueryResultSearchBase<T> {
    createQueryVector(): VectorizedQuery<T>[];
}
export declare class AzureQueryResultSearchSparse<T extends R> extends AzureQueryResultSearchBase<T> {
    createSearchQuery(): string;
}
export declare class AzureQueryResultSearchHybrid<T extends R> extends AzureQueryResultSearchBase<T> {
    createQueryVector(): VectorizedQuery<T>[];
    createSearchQuery(): string;
}
export declare class AzureQueryResultSearchSemanticHybrid<T extends R> extends AzureQueryResultSearchHybrid<T> {
    createQueryVector(): VectorizedQuery<T>[];
    _createQueryResult(searchQuery: string, vectorQueries: VectorizedQuery<T>[]): Promise<VectorStoreQueryResult>;
}
