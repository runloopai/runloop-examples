import type { ChatMessage } from "@llamaindex/core/llms";
import { BaseChatStore } from "@llamaindex/core/storage/chat-store";
import { MongoClient } from "mongodb";
export interface AzureCosmosVCoreChatStoreConfig {
    mongoClient?: MongoClient;
    dbName?: string;
    collectionName?: string;
}
export declare class AzureCosmosVCoreChatStore<AdditionalMessageOptions extends object = object> extends BaseChatStore<AdditionalMessageOptions> {
    private mongoClient;
    private dbName;
    private collectionName;
    private collection?;
    /**
     * Create a new AzureCosmosVCoreChatStore instance.
     */
    constructor({ mongoClient, dbName, collectionName, }: AzureCosmosVCoreChatStoreConfig);
    static fromMongoClient(mongoClient: MongoClient, dbName?: string, collectionName?: string): AzureCosmosVCoreChatStore<object>;
    client(): MongoClient;
    private convertToChatMessage;
    private convertTovCoreMessage;
    private ensureCollection;
    /**
     * Set messages for a given key.
     */
    setMessages(key: string, messages: ChatMessage<AdditionalMessageOptions>[]): Promise<void>;
    /**
     * Get messages for a given key.
     */
    getMessages(key: string): Promise<ChatMessage<AdditionalMessageOptions>[]>;
    /**
     * Add a message for a given key.
     */
    addMessage(key: string, message: ChatMessage<AdditionalMessageOptions>, idx?: number): Promise<void>;
    /**
     * Deletes all messages for a given key.
     */
    deleteMessages(key: string): Promise<void>;
    /**
     * Deletes one message at idx index for a given key.
     */
    deleteMessage(key: string, idx: number): Promise<void>;
    /**
     * Get all keys.
     */
    getKeys(): Promise<IterableIterator<string>>;
}
