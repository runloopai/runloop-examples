import { CosmosClient } from "@azure/cosmos";
import { type TokenCredential } from "@azure/identity";
import type { ChatMessage } from "@llamaindex/core/llms";
import { BaseChatStore } from "@llamaindex/core/storage/chat-store";
export interface AzureCosmosChatDatabaseProperties {
    throughput?: number;
}
export interface AzureCosmosChatContainerProperties {
    [key: string]: any;
}
export interface AzureCosmosNoSqlChatStoreConfig {
    cosmosClient?: CosmosClient;
    dbName?: string;
    containerName?: string;
    userId?: string;
    sessionId?: string;
    cosmosContainerProperties?: AzureCosmosChatContainerProperties;
    cosmosDatabaseProperties?: AzureCosmosChatDatabaseProperties;
    ttlInSeconds?: number;
}
export declare class AzureCosmosNoSqlChatStore<AdditionalMessageOptions extends object = object> extends BaseChatStore<AdditionalMessageOptions> {
    private userId;
    private ttl;
    private cosmosClient;
    private database;
    private container;
    private initPromise?;
    private dbName;
    private containerName;
    private cosmosContainerProperties;
    private cosmosDatabaseProperties;
    private initialize;
    constructor({ cosmosClient, dbName, containerName, cosmosContainerProperties, cosmosDatabaseProperties, ttlInSeconds, }: AzureCosmosNoSqlChatStoreConfig);
    client(): CosmosClient;
    private init;
    /**
     * Static method for creating an instance using a connection string.
     * If no connection string is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_CONNECTION_STRING` as connection string.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromConnectionString(config?: {
        connectionString?: string;
    } & AzureCosmosNoSqlChatStoreConfig): AzureCosmosNoSqlChatStore;
    /**
     * Static method for creating an instance using a account endpoint and key.
     * If no endpoint and key  is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as enpoint and `AZURE_COSMOSDB_NOSQL_ACCOUNT_KEY` as key.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromAccountAndKey(config?: {
        endpoint?: string;
        key?: string;
    } & AzureCosmosNoSqlChatStoreConfig): AzureCosmosNoSqlChatStore;
    /**
     * Static method for creating an instance using AAD token.
     * If no endpoint and credentials are provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as endpoint and use DefaultAzureCredential() as credentials.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromAadToken(config?: {
        endpoint?: string;
        credential?: TokenCredential;
    } & AzureCosmosNoSqlChatStoreConfig): AzureCosmosNoSqlChatStore;
    private convertToChatMessage;
    private convertToCosmosMessage;
    /**
     * Set messages for a given key.
     */
    setMessages(key: string, messages: ChatMessage<AdditionalMessageOptions>[]): Promise<void>;
    /**
     * Get messages for a given key.
     */
    getMessages(key: string): Promise<ChatMessage<AdditionalMessageOptions>[]>;
    /**
     * Add a message for a given key.
     */
    addMessage(key: string, message: ChatMessage<AdditionalMessageOptions>, idx?: number): Promise<void>;
    /**
     * Deletes all messages for a given key.
     */
    deleteMessages(key: string): Promise<void>;
    /**
     * Deletes one message at idx index for a given key.
     */
    deleteMessage(key: string, idx: number): Promise<void>;
    /**
     * Get all keys.
     */
    getKeys(): Promise<IterableIterator<string>>;
}
