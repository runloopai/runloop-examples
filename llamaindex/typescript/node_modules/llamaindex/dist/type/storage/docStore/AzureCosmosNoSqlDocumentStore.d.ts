import { AzureCosmosNoSqlKVStore, type AadTokenOptions, type AccountAndKeyOptions, type ConnectionStringOptions } from "../kvStore/AzureCosmosNoSqlKVStore.js";
import { KVDocumentStore } from "./KVDocumentStore.js";
export interface AzureCosmosNoSqlDocumentStoreArgs {
    azureCosmosNoSqlKVStore: AzureCosmosNoSqlKVStore;
    namespace?: string;
}
export declare class AzureCosmosNoSqlDocumentStore extends KVDocumentStore {
    constructor({ azureCosmosNoSqlKVStore, namespace, }: AzureCosmosNoSqlDocumentStoreArgs);
    /**
     * Static method for creating an instance using a connection string.
     * If no connection string is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_CONNECTION_STRING` as connection string.
     * @returns Instance of AzureCosmosNoSqlDocumentStore
     */
    static fromConnectionString(options?: ConnectionStringOptions): AzureCosmosNoSqlDocumentStore;
    /**
     * Static method for creating an instance using a account endpoint and key.
     * If no endpoint and key  is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as enpoint and `AZURE_COSMOSDB_NOSQL_ACCOUNT_KEY` as key.
     * @returns Instance of AzureCosmosNoSqlDocumentStore
     */
    static fromAccountAndKey(options?: AccountAndKeyOptions): AzureCosmosNoSqlDocumentStore;
    /**
     * Static method for creating an instance using AAD token.
     * If no endpoint and credentials are provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as endpoint and use DefaultAzureCredential() as credentials.
     * @returns Instance of AzureCosmosNoSqlDocumentStore
     */
    static fromAadToken(options?: AadTokenOptions): AzureCosmosNoSqlDocumentStore;
}
