import { CosmosClient } from "@azure/cosmos";
import { type TokenCredential } from "@azure/identity";
import { BaseKVStore } from "@llamaindex/core/storage/kv-store";
export interface CosmosDatabaseProperties {
    throughput?: number;
}
export interface CosmosContainerProperties {
    partitionKey: any;
    [key: string]: any;
}
export interface ConnectionStringOptions extends AzureCosmosNoSqlKVStoreConfig {
    connectionString?: string;
}
export interface AccountAndKeyOptions extends AzureCosmosNoSqlKVStoreConfig {
    endpoint?: string;
    key?: string;
}
export interface AadTokenOptions extends AzureCosmosNoSqlKVStoreConfig {
    endpoint?: string;
    credential?: TokenCredential;
}
export interface AzureCosmosNoSqlKVStoreConfig {
    cosmosClient?: CosmosClient;
    dbName?: string;
    containerName?: string;
    cosmosContainerProperties?: CosmosContainerProperties;
    cosmosDatabaseProperties?: CosmosDatabaseProperties;
}
export declare class AzureCosmosNoSqlKVStore extends BaseKVStore {
    private cosmosClient;
    private database;
    private container;
    private initPromise?;
    private dbName;
    private containerName;
    private cosmosContainerProperties;
    private cosmosDatabaseProperties;
    private initialize;
    constructor({ cosmosClient, dbName, containerName, cosmosContainerProperties, cosmosDatabaseProperties, }: AzureCosmosNoSqlKVStoreConfig);
    client(): CosmosClient;
    private init;
    /**
     * Static method for creating an instance using a connection string.
     * If no connection string is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_CONNECTION_STRING` as connection string.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromConnectionString(config?: {
        connectionString?: string;
    } & AzureCosmosNoSqlKVStoreConfig): AzureCosmosNoSqlKVStore;
    /**
     * Static method for creating an instance using a account endpoint and key.
     * If no endpoint and key  is provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as enpoint and `AZURE_COSMOSDB_NOSQL_ACCOUNT_KEY` as key.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromAccountAndKey(config?: {
        endpoint?: string;
        key?: string;
    } & AzureCosmosNoSqlKVStoreConfig): AzureCosmosNoSqlKVStore;
    /**
     * Static method for creating an instance using AAD token.
     * If no endpoint and credentials are provided, it will attempt to use the env variable `AZURE_COSMOSDB_NOSQL_ACCOUNT_ENDPOINT` as endpoint and use DefaultAzureCredential() as credentials.
     * @returns Instance of AzureCosmosNoSqlKVStore
     */
    static fromAadToken(config?: {
        endpoint?: string;
        credential?: TokenCredential;
    } & AzureCosmosNoSqlKVStoreConfig): AzureCosmosNoSqlKVStore;
    put(key: string, val: Record<string, any>): Promise<void>;
    get(key: string): Promise<Record<string, any> | null>;
    getAll(): Promise<Record<string, Record<string, any>>>;
    delete(key: string): Promise<boolean>;
}
