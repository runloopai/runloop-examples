import * as Core from "../../core.js";
import { Devboxes } from "./devboxes.js";
import { z } from 'zod';
/**
 * Tools for interacting with a a single devbox via an agent.
 */
export declare class DevboxTools {
    private devboxes;
    constructor(devboxes: Devboxes);
    /**
     * Get all file-related tools
     */
    fileTools(devboxId: string, options?: Core.RequestOptions): (import("../../lib/tools").RunloopTool<z.ZodObject<{
        file_path: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        file_path: string;
    }, {
        file_path: string;
    }>> | import("../../lib/tools").RunloopTool<z.ZodObject<{
        file_path: z.ZodString;
        contents: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        file_path: string;
        contents: string;
    }, {
        file_path: string;
        contents: string;
    }>>)[];
    /**
     * Get all shell-related tools
     */
    shellTools(devboxId: string, options?: Core.RequestOptions): (import("../../lib/tools").RunloopTool<z.ZodObject<{
        command: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        command: string;
    }, {
        command: string;
    }>> | import("../../lib/tools").RunloopTool<z.ZodObject<{
        execution_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        execution_id: string;
    }, {
        execution_id: string;
    }>>)[];
    /**
     * Get tools for managing tunnels on the devbox
     */
    tunnelTools(devboxId: string, options?: Core.RequestOptions): import("../../lib/tools").RunloopTool<z.ZodObject<{
        port: z.ZodNumber;
        protocol: z.ZodEnum<["http", "https", "tcp"]>;
    }, "strip", z.ZodTypeAny, {
        port: number;
        protocol: "http" | "https" | "tcp";
    }, {
        port: number;
        protocol: "http" | "https" | "tcp";
    }>>[];
}
//# sourceMappingURL=tools.d.ts.map