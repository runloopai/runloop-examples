"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskSnapshotsCursorIDPage = exports.RepositoriesCursorIDPage = exports.DevboxesCursorIDPage = exports.BlueprintsCursorIDPage = void 0;
const core_1 = require("./core.js");
class BlueprintsCursorIDPage extends core_1.AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.blueprints = body.blueprints || [];
        this.has_more = body.has_more || false;
        this.total_count = body.total_count || 0;
    }
    getPaginatedItems() {
        return this.blueprints ?? [];
    }
    // @deprecated Please use `nextPageInfo()` instead
    nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
            return null;
        if ('params' in info)
            return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
            return null;
        return params;
    }
    nextPageInfo() {
        const blueprints = this.getPaginatedItems();
        if (!blueprints.length) {
            return null;
        }
        const id = blueprints[blueprints.length - 1]?.id;
        if (!id) {
            return null;
        }
        return { params: { starting_after: id } };
    }
}
exports.BlueprintsCursorIDPage = BlueprintsCursorIDPage;
class DevboxesCursorIDPage extends core_1.AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.devboxes = body.devboxes || [];
        this.has_more = body.has_more || false;
        this.total_count = body.total_count || 0;
    }
    getPaginatedItems() {
        return this.devboxes ?? [];
    }
    // @deprecated Please use `nextPageInfo()` instead
    nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
            return null;
        if ('params' in info)
            return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
            return null;
        return params;
    }
    nextPageInfo() {
        const devboxes = this.getPaginatedItems();
        if (!devboxes.length) {
            return null;
        }
        const id = devboxes[devboxes.length - 1]?.id;
        if (!id) {
            return null;
        }
        return { params: { starting_after: id } };
    }
}
exports.DevboxesCursorIDPage = DevboxesCursorIDPage;
class RepositoriesCursorIDPage extends core_1.AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.repositories = body.repositories || [];
        this.has_more = body.has_more || false;
        this.total_count = body.total_count || 0;
    }
    getPaginatedItems() {
        return this.repositories ?? [];
    }
    // @deprecated Please use `nextPageInfo()` instead
    nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
            return null;
        if ('params' in info)
            return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
            return null;
        return params;
    }
    nextPageInfo() {
        const repositories = this.getPaginatedItems();
        if (!repositories.length) {
            return null;
        }
        const id = repositories[repositories.length - 1]?.id;
        if (!id) {
            return null;
        }
        return { params: { starting_after: id } };
    }
}
exports.RepositoriesCursorIDPage = RepositoriesCursorIDPage;
class DiskSnapshotsCursorIDPage extends core_1.AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.snapshots = body.snapshots || [];
        this.has_more = body.has_more || false;
        this.total_count = body.total_count || 0;
    }
    getPaginatedItems() {
        return this.snapshots ?? [];
    }
    // @deprecated Please use `nextPageInfo()` instead
    nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
            return null;
        if ('params' in info)
            return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
            return null;
        return params;
    }
    nextPageInfo() {
        const snapshots = this.getPaginatedItems();
        if (!snapshots.length) {
            return null;
        }
        const id = snapshots[snapshots.length - 1]?.id;
        if (!id) {
            return null;
        }
        return { params: { starting_after: id } };
    }
}
exports.DiskSnapshotsCursorIDPage = DiskSnapshotsCursorIDPage;
//# sourceMappingURL=pagination.js.map