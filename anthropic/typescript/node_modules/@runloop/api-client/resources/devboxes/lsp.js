"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lsp = void 0;
const resource_1 = require("../../resource.js");
class Lsp extends resource_1.APIResource {
    /**
     * Apply a code action to a given code segment not all code actions are supported
     * yet
     */
    applyCodeAction(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/apply-code-action`, { body, ...options });
    }
    /**
     * Get code actions for a part of a document. This method calls the
     * `getCodeActions` method of the `LanguageService` class, which in turn
     * communicates with the TypeScript language server to retrieve code actions for a
     * given document.
     * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_codeAction
     */
    codeActions(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/code-actions`, { body, ...options });
    }
    /**
     * Get diagnostics for a given file URI from the language server
     */
    diagnostics(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/diagnostics`, { body, ...options });
    }
    /**
     * Get document symbols for a given document.
     */
    documentSymbols(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/document-symbols`, { body, ...options });
    }
    /**
     * Get the contents of a file at a given path relative to the root directory
     */
    file(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/file`, { body, ...options });
    }
    /**
     * Get the definition of a symbol at a given position in a file
     * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_definition
     */
    fileDefinition(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/file-definition`, { body, ...options });
    }
    /**
     * Get a list of all files being watched by the language server
     */
    files(id, options) {
        return this._client.get(`/v1/devboxes/${id}/lsp/files`, options);
    }
    /**
     * Get formatting changes for a given document.
     * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_formatting
     */
    formatting(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/formatting`, { body, ...options });
    }
    /**
     * Get a list of code actions for a given diagnostic
     */
    getCodeActionsForDiagnostic(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/get-code-actions-for-diagnostic`, { body, ...options });
    }
    /**
     * Get the symbol, reference, and diagnostic information for a given code segment
     * in a file at a given depth
     */
    getCodeSegmentInfo(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/get-code-segment-info`, { body, ...options });
    }
    /**
     * Get the symbol, reference, and diagnostic information for a given code segment
     * in a file at a given depth
     */
    getSignatureHelp(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/get-signature-help`, { body, ...options });
    }
    /**
     * This method provides a health check for the language server, including its
     * status, uptime, the directory being watched, and the name of the module.
     */
    health(id, options) {
        return this._client.get(`/v1/devboxes/${id}/lsp/health`, options);
    }
    /**
     * Get references for a given symbol. This method calls the `getReferences` method
     * of the `LanguageService` class, which in turn communicates with the TypeScript
     * language server to retrieve references for a given symbol in the document.
     * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_references
     */
    references(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/references`, { body, ...options });
    }
    /**
     * Set the watch directory for the language server to a new path and restart the
     * server
     */
    setWatchDirectory(id, body, options) {
        return this._client.post(`/v1/devboxes/${id}/lsp/set-watch-directory`, { body, ...options });
    }
}
exports.Lsp = Lsp;
//# sourceMappingURL=lsp.js.map